from collections import Counterfrom google.cloud import visionimport osimport random# set environment variable for Google App creds (GCP service account docs 28 May 2025)os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "playlist-cover-image-gen.json"# initialize list of art_type = ["abstract digital", "generative art", "3D render"," mixed media", "sketchbook", "pop art"]aesthetic_list = ["modern", "retro-futuristic", "brutalist", "vaporwave", "industrial", "cyberpunk", "gothic", "grunge"]style_list = ["photorealistic", "low-poly", "surreal", "cinematic", "cartoon", "geometric", "charicature", "satirical"]palette_list = ["toned pastel", "neon spectrum", "earth tones", "monochrome"]lighting_list = ["harsh spotlight", "soft diffused", "moody shadows", "backlit"]mood_list = ["energetic", "eerie", "calm", "rebellious", "dreamlike"]composition_list = ["centered portrait", "top-down view", "wide-angle", "layered depth"]def get_labels_from_image_url(image_urls):    """    Generates labels of images using Google Cloud Vision    Args:        image_urls (string): url of image to be labeled    Returns:        list: list of string labels    """    # find most common image urls with Counter() (Counter docs 28 May 2025)    image_urls_count = Counter(image_urls)    top_images = image_urls_count.most_common(min(len(image_urls_count), 10))    # sample 5 of top 10 most frequent image urls to introduce model noise    image_set = random.sample(top_images, min(len(top_images), 5))    # initialize label list    labels = []    # loop through urls    for image_url in image_urls:        # create image annotations using Google cloud vision(Google cloud vision docs 28 May 2025)        client = vision.ImageAnnotatorClient()        image = vision.Image()        image.source = vision.ImageSource()         image.source.image_uri = image_url        response = client.label_detection(image=image)        # error logic        if response.error.message:            print("Vision API error:", response.error.message)            return []        # append each label to list        labels.append([label.description for label in response.label_annotations])    # return list of labels    return labelsdef generate_prompt_from_labels(labels):    """    Generates an AI prompt to use for image generation given a list of image labels    Args:        labels (list): list of string labels of an image or collection of images    Returns:        string: prompt to use for AI image generation    """    # flatten all values in lists and sublists for labels    flat_labels = [label.lower() for sublist in labels for label in sublist]    # count occurences of labels with Counter() (Counter docs 28 May 2025)    counts = Counter(flat_labels)    # leave out generic labels    generic = {'Publication', 'Graphics', 'Graphic design', 'Advertising', 'Poster', 'Album', 'Technology', 'CD/DVD Organizer'}    filtered = [label for label in counts if label not in generic]        # get 10 most common labels    top_labels = [label for label, _ in counts.most_common() if label in filtered][:10]    # sample 5 of 10 most common labels to introduce model noise    labels_sample = random.sample(top_labels, min(5, len(top_labels)))    # return simple prompt if there is one label    if len(labels_sample) == 1:        return f"An abstract digital album cover featuring {labels_sample[0]}, with a modern aesthetic in a cartoon style."    # return prompt with multiple labels    return f"An abstract album cover featuring {', '.join(labels_sample[:-1])}, and {labels_sample[-1]} with a vintage aesthetic in a surrealist style."#prompt = f"A {art_type} album cover featuring {', '.join(labels_sample[:-1])}, and {labels_sample[-1]}, with a {aesthetic} aestethic, rendered in a {style} style. The design uses a {color_palette} color palette, illuminated by {lighting}, evoking a {mood} mood and composed in a {composition} format."    